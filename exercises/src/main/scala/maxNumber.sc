object Solution {
  def max(v1: Vector[Int], v2: Vector[Int]): Vector[Int] = {
    if (v1.length == v2.length) {
      v1.indices.foreach { i =>
        if (v1(i) > v2(i)) return v1
        else if (v1(i) < v2(i)) return v2
      }
      v1
    }
    else if (v1.length > v2.length) v1
    else v2
  }

  def merge(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {
    val numsArr = (0 to nums1.length).map { i =>
      (0 to nums2.length).map { j =>
        Vector(0)
      }.toArray
    }.toArray
    (1 to nums1.length).foreach { i => numsArr(i)(0) = nums1.slice(0,i).toVector }
    (1 to nums2.length).foreach { j => numsArr(0)(j) = nums2.slice(0,j).toVector }
    (1 to nums1.length).foreach { i =>
      (1 to nums2.length).foreach { j =>
        numsArr(i)(j) = max(numsArr(i)(j-1) :+ nums2(j-1), numsArr(i-1)(j) :+ nums1(i-1))
      }
    }
    numsArr(nums1.length)(nums2.length).toArray
  }

  def maxNumber(nums1: Array[Int], nums2: Array[Int], k: Int): Array[Int] = {
    val table = (0 to nums1.length).toArray.map { _ =>
      (0 to nums2.length).toArray.map { _ =>
        (0 to k).toArray.map { _ =>
          BigInt(0)
        }
      }
    }

    nums1.indices.foreach { i => table(i+1)(0)(0) = nums1.slice(0,i+1).max }
    nums2.indices.foreach { j => table(0)(j+1)(0) = nums2.slice(0,j+1).max }

    (0 to nums1.length).foreach { i =>
      (0 to nums2.length).foreach { j =>
        (0 to k).foreach { h =>
          if (i+j >= h && h > 0) {
            if (i != 0) {
              table(i)(j)(h) = table(i-1)(j)(h).max(table(i-1)(j)(h-1) * 10 + nums1(i-1))
            }
            if (j != 0) {
              table(i)(j)(h) = table(i)(j)(h)
                .max(table(i)(j-1)(h))
                .max(table(i)(j-1)(h-1) * 10 + nums2(j-1))
            }
          }
          else if (h == 0 && i != 0 && j != 0) {
            table(i)(j)(h) = table(i-1)(j)(h).max(table(i)(j-1)(h))
          }
        }
      }
    }

//    (0 to k).foreach { h =>
//      (0 to nums2.length).foreach { j =>
//        (0 to nums1.length).foreach { i =>
//          print(s"${table(i)(j)(h)}, ")
//        }
//        println
//      }
//      println
//    }
    val finalVal = table(nums1.length)(nums2.length)(k-1)
    (0 until k).reverse.map { h =>
      ((0 until h).foldLeft(finalVal) { case (acc, _) => acc / 10 } % 10).toInt
    }.toArray
//    finalVal.toArray
  }
//  maxNumber(Array(6,7), Array(6,0,4), 5)
//  maxNumber(Array(6,7), Array(6,0,4), 4)
//  maxNumber(Array(3,4,6,5), Array(9,1,2,5,8,3), 5) sameElements Array(9,8,6,5,3)
//
  maxNumber(Array(8,7,1,5), Array(9,7,9,1), 4) sameElements Array(9,9,8,7)
//  maxNumber(Array(2,5,6,4,4,0), Array(7,3,8,0,6,5,7,6,2), 15)
//
//  maxNumber(Array(6,9,2,3,6,7,9,9,0,9,6,2,3,3,3,4,7,4,5,6,8,5,0,4,9,9,0,7,8,5,0,0,3,7,9,3),
//    Array(1,6,5,7,6,0,6,5,1,0,1,0,8,2,7,4,5,4,2,6,2,4,0,1,3,9,6,0,1,3,0,1,5,3,5,1,7,2,8,3,1,9,0,3,4,5,1,7,6,1,5,9,8,5,9,9,8,7,6,0,3,9,0,2,8,7,5,4,0,5,1,8,3,2,2,7,8,9,8,5,7,4,8,1,1,1,6,5,7,1,1,4,0,4,2,3,3,3,6,2,0,2,1,3,7,9,7,2,8,0,6,9,0,2,1,8,4,6,7,9,2,5,9,4,6,1,9,5,7,9,4,1,0,6,8,0,1,3,9,4,2,9,8,0,6,9,0,7,3,4,6,2,4,8,3,2,4,1,8,3,8,1,3,9,0,9,3,5,8,2,7,5,3,7,3,1,3,5,9,8),
//    180) sameElements Array(9, 9, 9, 9, 9, 7, 6, 6, 5, 3, 1, 1, 8, 2, 7, 4, 5, 4, 2, 6, 2, 4, 0, 1, 3, 9, 6, 0, 1, 3, 0, 1, 5, 3, 5, 1, 7, 2, 8, 3, 1, 9, 0, 3, 4, 5, 1, 7, 6, 1, 5, 9, 8, 5, 9, 9, 8, 7, 6, 0, 3, 9, 0, 2, 8, 7, 5, 4, 0, 5, 1, 8, 3, 2, 2, 7, 8, 9, 8, 5, 7, 4, 8, 1, 1, 1, 6, 5, 7, 1, 1, 4, 0, 4, 2, 3, 3, 3, 6, 2, 0, 2, 1, 3, 7, 9, 7, 2, 8, 0, 6, 9, 0, 2, 1, 8, 4, 6, 7, 9, 2, 5, 9, 4, 6, 1, 9, 5, 7, 9, 4, 1, 0, 6, 8, 0, 1, 3, 9, 4, 2, 9, 8, 0, 6, 9, 0, 7, 3, 4, 6, 2, 4, 8, 3, 2, 4, 1, 8, 3, 8, 1, 3, 9, 0, 9, 3, 5, 8, 2, 7, 5, 3, 7, 3, 1, 3, 5, 9, 8)

//  maxNumber(Array(8,9,7,3,5,9,1,0,8,5,3,0,9,2,7,4,8,9,8,1,0,2,0,2,7,2,3,5,4,7,4,1,4,0,1,4,2,1,3,1,5,3,9,3,9,0,1,7,0,6,1,8,5,6,6,5,0,4,7,2,9,2,2,7,6,2,9,2,3,5,7,4,7,0,1,8,3,6,6,3,0,8,5,3,0,3,7,3,0,9,8,5,1,9,5,0,7,9,6,8,5,1,9,6,5,8,2,3,7,1,0,1,4,3,4,4,2,4,0,8,4,6,5,5,7,6,9,0,8,4,6,1,6,7,2,0,1,1,8,2,6,4,0,5,5,2,6,1,6,4,7,1,7,2,2,9,8,9,1,0,5,5,9,7,7,8,8,3,3,8,9,3,7,5,3,6,1,0,1,0,9,3,7,8,4,0,3,5,8,1,0,5,7,2,8,4,9,5,6,8,1,1,8,7,3,2,3,4,8,7,9,9,7,8,5,2,2,7,1,9,1,5,5,1,3,5,9,0,5,2,9,4,2,8,7,3,9,4,7,4,8,7,5,0,9,9,7,9,3,8,0,9,5,3,0,0,3,0,4,9,0,9,1,6,0,2,0,5,2,2,6,0,0,9,6,3,4,1,2,0,8,3,6,6,9,0,2,1,6,9,2,4,9,0,8,3,9,0,5,4,5,4,6,1,2,5,2,2,1,7,3,8,1,1,6,8,8,1,8,5,6,1,3,0,1,3,5,6,5,0,6,4,2,8,6,0,3,7,9,5,5,9,8,0,4,8,6,0,8,6,6,1,6,2,7,1,0,2,2,4,0,0,0,4,6,5,5,4,0,1,5,8,3,2,0,9,7,6,2,6,9,9,9,7,1,4,6,2,8,2,5,3,4,5,2,4,4,4,7,2,2,5,3,2,8,2,2,4,9,8,0,9,8,7,6,2,6,7,5,4,7,5,1,0,5,7,8,7,7,8,9,7,0,3,7,7,4,7,2,0,4,1,1,9,1,7,5,0,5,6,6,1,0,6,9,4,2,8,0,5,1,9,8,4,0,3,1,2,4,2,1,8,9,5,9,6,5,3,1,8,9,0,9,8,3,0,9,4,1,1,6,0,5,9,0,8,3,7,8,5),
//    Array(7,8,4,1,9,4,2,6,5,2,1,2,8,9,3,9,9,5,4,4,2,9,2,0,5,9,4,2,1,7,2,5,1,2,0,0,5,3,1,1,7,2,3,3,2,8,2,0,1,4,5,1,0,0,7,7,9,6,3,8,0,1,5,8,3,2,3,6,4,2,6,3,6,7,6,6,9,5,4,3,2,7,6,3,1,8,7,5,7,8,1,6,0,7,3,0,4,4,4,9,6,3,1,0,3,7,3,6,1,0,0,2,5,7,2,9,6,6,2,6,8,1,9,7,8,8,9,5,1,1,4,2,0,1,3,6,7,8,7,0,5,6,0,1,7,9,6,4,8,6,7,0,2,3,2,7,6,0,5,0,9,0,3,3,8,5,0,9,3,8,0,1,3,1,8,1,8,1,1,7,5,7,4,1,0,0,0,8,9,5,7,8,9,2,8,3,0,3,4,9,8,1,7,2,3,8,3,5,3,1,4,7,7,5,4,9,2,6,2,6,4,0,0,2,8,3,3,0,9,1,6,8,3,1,7,0,7,1,5,8,3,2,5,1,1,0,3,1,4,6,3,6,2,8,6,7,2,9,5,9,1,6,0,5,4,8,6,6,9,4,0,5,8,7,0,8,9,7,3,9,0,1,0,6,2,7,3,3,2,3,3,6,3,0,8,0,0,5,2,1,0,7,5,0,3,2,6,0,5,4,9,6,7,1,0,4,0,9,6,8,3,1,2,5,0,1,0,6,8,6,6,8,8,2,4,5,0,0,8,0,5,6,2,2,5,6,3,7,7,8,4,8,4,8,9,1,6,8,9,9,0,4,0,5,5,4,9,6,7,7,9,0,5,0,9,2,5,2,9,8,9,7,6,8,6,9,2,9,1,6,0,2,7,4,4,5,3,4,5,5,5,0,8,1,3,8,3,0,8,5,7,6,8,7,8,9,7,0,8,4,0,7,0,9,5,8,2,0,8,7,0,3,1,8,1,7,1,6,9,7,9,7,2,6,3,0,5,3,6,0,5,9,3,9,1,1,0,0,8,1,4,3,0,4,3,7,7,7,4,6,4,0,0,5,7,3,2,8,5,1,4,5,8,5,6,7,5,7,3,3,9,6,8,1,5,1,1,1,0,3),
//    500)

}